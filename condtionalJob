@Bean(name =  "test_testmgmt_ConditionalJob" )
public Job conditionalJob throws Exception {
    RequestScoptUtil.getAttribute().setUserId("12345");

    Flow flow1 = new FileBuilder <Flow> ("flow1").start(prodCdInfoStep01())
                  .on("COMPLETED WITH SKIPS")
                  .end()
                  .from(prodCdInfoStep01())
                  .on("COMPLETED")
                  .to(prodCdInfoStep02())
                  .build();

    Flow flow2 = new FileBuilder <Flow> ("flow2").start(prodCdInfoStep03())
                  .on("COMPLETED WITH SKIPS")
                  .end()
                  .from(prodCdInfoStep03())
                  .on("COMPLETED")
                  .to(prodCdInfoStep04())
                  .build();

    return jobBuilderFactory.get("test_testmgmt_ConditionalJob")
                  .listener(new BaseJobLogger())
                  .start(flow1)
                  .next(flow2)
                  .end()
                  .build();
}

@Bean
public Step prodCdInfoStep03 throws Exception {
    return stepBuilderFactory.get("prodCdInfoStep03")
        .tasklet((StepContribution contribution, ChunkContext chunkContext) -> {
                List<ProdCdInfoBatchDTO> duplicateList = dataShareBean.get("duplicateData");
                if(NullUtil.isNone(duplicateList)) {
                    contribution.setExitStatus(new ExitStatus("COMPLETED WITH SKIPS"));
                } else {
                    List<ProdCdInfoBatchDTO> newProdCdInfoList = prodCdInfoService.retrieveProdCdInfo(duplicateList);
                    if (NullUtil.isNone(newProdCdInfoList)) {
                         contribution.setExitStatus(new ExitStatus("COMPLETED WITH SKIPS"));
                    }
                    dataShareBean.putData("newProdCdInfoListData", newProdCdInfoList);
                }
                    return RepeatStatus.FINISHED;
                })
                .listener(new BaseStepLogger())
                .build();
}
